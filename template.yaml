AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  serverless-enrollment-poc

Parameters:
  BasicAuthUsername:
    Type: String
    Description: The username for Basic Authentication.
    NoEcho: true
  BasicAuthPassword:
    Type: String
    Description: The password for Basic Authentication.
    NoEcho: true

Globals:
  Function:
    Timeout: 20
    MemorySize: 128
    Runtime: python3.9
    Environment:
      Variables:
        AGE_GROUPS_TABLE: !Ref AgeGroupsTable
        ENROLLMENTS_TABLE: !Ref EnrollmentsTable
        ENROLLMENT_QUEUE_URL: !Ref EnrollmentQueue

Resources:
  BasicAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/authorizer/
      Handler: app.lambda_handler
      Environment:
        Variables:
          # These values are passed in during 'sam deploy'
          BASIC_AUTH_USERNAME: !Ref BasicAuthUsername
          BASIC_AUTH_PASSWORD: !Ref BasicAuthPassword

  # API Gateway REST API
  EnrollmentsApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: MyBasicAuthorizer
        Authorizers:
          MyBasicAuthorizer:
            FunctionArn: !GetAtt BasicAuthorizerFunction.Arn
            FunctionPayloadType: TOKEN # For header-based authorizers
            Identity:
              Headers:
                - authorization # The header to pass to the authorizer
              ReauthorizeEvery: 0 # basic authentication don't work without it. 
              # (stackoverflow.com/questions/66223516/aws-user-is-not-authorized-to-access-this-resource)

  # DynamoDB Tables
  AgeGroupsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  EnrollmentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # SQS Queue
  EnrollmentQueue:
    Type: AWS::SQS::Queue

  # --- Lambda Functions ---

  CreateAgeGroupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/age_groups/
      Handler: app.create_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AgeGroupsTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /age-groups
            Method: post
            RestApiId: !Ref EnrollmentsApi

  ListAgeGroupsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/age_groups/
      Handler: app.list_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref AgeGroupsTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /age-groups
            Method: get
            RestApiId: !Ref EnrollmentsApi

  DeleteAgeGroupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/age_groups/
      Handler: app.delete_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AgeGroupsTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /age-groups/{id}
            Method: delete
            RestApiId: !Ref EnrollmentsApi

  RequestEnrollmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/enrollments/
      Handler: app.request_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref AgeGroupsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref EnrollmentsTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt EnrollmentQueue.QueueName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /enrollments
            Method: post
            RestApiId: !Ref EnrollmentsApi

  GetEnrollmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/enrollments/
      Handler: app.get_status_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref EnrollmentsTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /enrollments/{id}
            Method: get
            RestApiId: !Ref EnrollmentsApi

  ProcessEnrollmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/processor/
      Handler: app.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EnrollmentsTable
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt EnrollmentQueue.Arn
            BatchSize: 1

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${EnrollmentsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
